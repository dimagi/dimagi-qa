# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: HQ Smoke Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  repository_dispatch:
    types: [ deploy_success ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - eu
          - india
  schedule:
    - cron: '30 6 * * 1-5'

jobs:
  set_matrix:
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'repository_dispatch' && github.event.client_payload.environment == 'staging') }}
    outputs:
      matrix: ${{ steps.set-matrix-schedule.outputs.matrix || steps.set-matrix-deploy.outputs.matrix || steps.set-matrix-manual.outputs.matrix || steps.set-matrix-default.outputs.matrix }}
    steps:
      - id: set-matrix-schedule
        if: ${{ github.event_name  == 'schedule' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"staging\"]}"
      - id: set-matrix-deploy
        if: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment != 'staging' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"${{ github.event.client_payload.environment }}\"]}"
      - id: set-matrix-manual
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "::set-output name=matrix::{\"environment\":[\"${{ inputs.environment }}\"]}"
      - id: set-matrix-default
        if: ${{ github.event_name != 'repository_dispatch' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"production\", \"staging\", \"india\"]}"

  build:
    needs: set_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set_matrix.outputs.matrix) }}
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.environment }}
      cancel-in-progress: true
    name: Smoke on '${{ matrix.environment }}'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.13
        uses: actions/setup-python@v2
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r HQSmokeTests/requires.txt

      - name: CCHQ Smoke Test with pytest
        env:
          DIMAGIQA_ENV: ${{ matrix.environment }}  #${{ secrets.DIMAGIQA_URL }}
          DIMAGIQA_LOGIN_USERNAME: ${{ secrets.DIMAGIQA_LOGIN_USERNAME }}
          DIMAGIQA_LOGIN_PASSWORD: ${{ secrets.DIMAGIQA_LOGIN_PASSWORD }}
          DIMAGIQA_MAIL_USERNAME: ${{ secrets.DIMAGIQA_MAIL_USERNAME }}
          DIMAGIQA_MAIL_PASSWORD: ${{ secrets.DIMAGIQA_MAIL_PASSWORD }}
          DIMAGIQA_BS_USER: ${{ secrets.DIMAGIQA_BS_USER }}
          DIMAGIQA_BS_KEY: ${{ secrets.DIMAGIQA_BS_KEY }}
          DIMAGIQA_STAGING_AUTH_KEY: ${{ secrets.DIMAGIQA_STAGING_AUTH_KEY }}
          DIMAGIQA_INDIA_AUTH_KEY: ${{ secrets.DIMAGIQA_INDIA_AUTH_KEY }}
          DIMAGIQA_PROD_AUTH_KEY: ${{ secrets.DIMAGIQA_PROD_AUTH_KEY }}
          DIMAGIQA_EU_AUTH_KEY: ${{ secrets.DIMAGIQA_EU_AUTH_KEY }}
          DIMAGIQA_INVITED_WEBUSER_PASSWORD: ${{ secrets.DIMAGIQA_INVITED_WEBUSER_PASSWORD }}
          DIMAGIQA_IMAP_PASSWORD: ${{secrets.DIMAGIQA_IMAP_PASSWORD}}
        run: |
          echo "client_payload: ${{ toJson(github.event.client_payload) }}"
          echo "matrix environment: ${{ matrix.environment }}"
          echo "NOW=$(date +'%m-%d %H:%M')" >> $GITHUB_ENV
          echo ${{env.NOW}}
          pytest -v --rootdir= HQSmokeTests/testCases -n 4 --dist=loadfile --reruns 1 --reruns-delay 1 --html=report_${{ matrix.environment }}.html --self-contained-html --json-report --json-report-file=final_failures.json

      - name: Parse test counts
        id: parse_counts
        if: always()
        run: |
          # Extract variables from the hqsmoke_test_counts.txt file
          while IFS= read -r line; do
            echo "::set-output name=${line%=*}::${line#*=}"
          done < hqsmoke_test_counts_${{ matrix.environment }}.txt

      - name: Archive test results
        id: artifact-upload-step
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-result-reports--${{ matrix.environment }}-${{ github.run_id }}
          path: /home/runner/work/dimagi-qa/dimagi-qa/report_${{ matrix.environment }}.html
          retention-days: 2

      - name: Fetch artifact ID
        run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

      - name: Generate Jira Summary from HTML Report
        if: ${{ failure() && github.event_name == 'repository_dispatch' && matrix.environment == 'production' }}
        run: |
          python3 -c "from common_utilities.fixtures import generate_jira_summary_from_json_report; generate_jira_summary_from_json_report('final_failures.json', 'jira_ticket_body.html')"

      - name: Extract JIRA Summary HTML
        id: extract_summary
        if: ${{ failure() && github.event_name == 'repository_dispatch' && matrix.environment == 'production' }}
        run: |
          {
            echo 'body_html<<EOF'
            cat jira_ticket_body.html
            echo 'EOF'
          } | tee -a "$GITHUB_OUTPUT"
      

      - name: Send Jira Ticket Email
        if: ${{ failure() && github.event_name == 'repository_dispatch' && matrix.environment == 'production' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.DIMAGIQA_MAIL_USERNAME }}
          password: ${{ secrets.DIMAGIQA_MAIL_PASSWORD }}
          subject: "[Smoke Test][${{ matrix.environment }}] Automated Jira Ticket - HQSmokeTest Run #${{ github.run_number }} with ${{ steps.parse_counts.outputs.FAILED }} Test Failure(s)"
          to: support@dimagi.com, qa@dimagi.com
          from: <${{ secrets.DIMAGIQA_MAIL_USERNAME }}>
          html_body: ${{ steps.extract_summary.outputs.body_html }}
          attachments: report_${{ matrix.environment }}.html

      - name: Set email vars
        if: ${{ failure() }}
        id: configure_email
        uses: actions/github-script@v6
        env:
            JOB_STATUS: ${{ job.status }}
            CC_ENV: ${{ matrix.environment }}
        with:
          script: |
            const { promises: fs } = require('fs')

            const {JOB_STATUS, NOW, CC_ENV, GITHUB_HEAD_REF} = process.env
            const prefix = `[${CC_ENV}] Smoke Tests - ${JOB_STATUS.toUpperCase()} - Run #${context.runNumber}`
            const suffix = `at ${NOW}`

            let subject = `${prefix} on "deploy_success" ${suffix}`
            if (context.eventName !== "repository_dispatch") {
              subject = `${prefix} on branch "${GITHUB_HEAD_REF}" ${suffix}`
            }

            let bodyFile = './common_utilities/mail_templates/email_pass.md'
            if (JOB_STATUS !== 'success') {
              bodyFile = './common_utilities/mail_templates/email_fail.md'
            }

            let actionRunLink = context.payload.repository.html_url + `/actions/runs/${context.runId}`
            let testSuite = 'CommCare HQ Smoke Test'
            let bodyContent = await fs.readFile(bodyFile, 'utf8')
            bodyContent = bodyContent.replace(/{{actionRunLink}}/g, actionRunLink)
                .replace(/{{runNumber}}/g, context.runNumber)
                .replace(/{{environment}}/g, CC_ENV)
                .replace(/{{testSuite}}/g, testSuite)

            let receivers = 'qa-automation@dimagi.com'
            if (context.eventName !== "pull_request" || context.eventName !== "push") {
              receivers = 'qa@dimagi.com, sameena.shaik@fissionlabs.com'
            }

            return {
              "subject": subject,
              "body": bodyContent,
              "reference": Math.random().toString(36).substr(2),  // used to prevent threading of similar emails
              "receivers": receivers
            }

      - name: Send Result Email
        if: ${{ failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.DIMAGIQA_MAIL_USERNAME}}
          password: ${{secrets.DIMAGIQA_MAIL_PASSWORD}}
          subject: ${{ fromJSON(steps.configure_email.outputs.result).subject }}
          to: ${{ fromJSON(steps.configure_email.outputs.result).receivers }}
          from: <${{secrets.DIMAGIQA_MAIL_USERNAME}}>
          html_body: ${{ fromJSON(steps.configure_email.outputs.result).body }}
          convert_markdown: true
          attachments: ${{ github.workspace }}/report_${{ matrix.environment }}.html
          in_reply_to: ${{ fromJSON(steps.configure_email.outputs.result).reference }}


      - name: Set slack vars
        if: ${{ always() }}
        id: configure_slack
        uses: actions/github-script@v6
        env:
            JOB_STATUS: ${{ job.status }}
            CC_ENV: ${{ matrix.environment }}
            CC_EVENT: ${{ github.event_name }}
        with:
          result-encoding: string
          script: |
            const {CC_ENV, JOB_STATUS, CC_EVENT} = process.env
            let SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}'
            if (CC_EVENT == 'repository_dispatch' && CC_ENV == 'production') {
              SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_PROD_RESULTS }}'
              SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_PROD }}'
              console.log( "Prod deploy")
            } else if (CC_EVENT != 'repository_dispatch' && CC_ENV == 'production' && JOB_STATUS == 'failure') {
              SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}'
              SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}'
              console.log( "Not Prod deploy but Prof failure")
            } else if (CC_ENV == 'staging' && JOB_STATUS == 'failure') {
              SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}'
              SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}'
              console.log("Staging Failure")
            } else if (CC_EVENT == 'repository_dispatch' && CC_ENV == 'india') {
              SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_INDIA }}'
              SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_INDIA }}'
              console.log("India Failure")
            } else if (CC_EVENT != 'repository_dispatch' && CC_ENV == 'india' && JOB_STATUS == 'failure') {
              SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}'
              SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}'
              console.log("India Success")
            } else {
              SLACK_WEBHOOK_URL = ' '
              SLACK_CHANNEL_ID = ' '
              console.log("No notification sent")
            }

            return { SLACK_WEBHOOK_URL, SLACK_CHANNEL_ID }

      - name: Upload Combined Chart to Slack
        if: ${{ !cancelled() }}
        run: |
          COMBINED_JSON=$(curl -s -F file=@slack_charts/summary_combined.png \
            -F channels=${{ fromJSON(steps.configure_slack.outputs.result).SLACK_CHANNEL_ID }} \
            -F "initial_comment=📊 Test Summary Charts - ${{ matrix.environment }}" \
            -H "Authorization: Bearer ${{ secrets.SLACK_QA_BOT_TOKEN }}" \
            https://slack.com/api/files.upload)
      
          COMBINED_URL=$(echo $COMBINED_JSON | jq -r '.file.permalink')
          echo "COMBINED_URL=$COMBINED_URL" >> $GITHUB_ENV

      - name: Debug Slack Upload
        run: |
          echo "COMBINED_JSON=$COMBINED_JSON"
          echo "COMBINED_URL=$COMBINED_URL"
#
#      - name: Post to Slack channel on Success
#        if: ${{ fromJSON(steps.configure_slack.outputs.result).SLACK_WEBHOOK_URL != '' && success() }}
#        uses: slackapi/slack-github-action@v1.23.0
#        with:
#          payload: |
#            {
#              "attachments": [
#                {
#                  "color": "#36a64f",
#                  "blocks": [
#                    {
#                      "type": "section",
#                      "text": {
#                        "type": "mrkdwn",
#                        "text": "Hey 👋 \n*${{ github.workflow }}* just finished successfully! 🎉\n"
#                      }
#                    },
#                    {
#                      "type": "section",
#                      "text": {
#                        "type": "mrkdwn",
#                        "text": "*Passed:* ${{ steps.parse_counts.outputs.PASSED }}  *Failed:* ${{ steps.parse_counts.outputs.FAILED }}  *Error:* ${{ steps.parse_counts.outputs.ERROR }}  *Skipped:* ${{ steps.parse_counts.outputs.SKIPPED }}  *XFail:* ${{ steps.parse_counts.outputs.XFAIL }}"
#                      }
#                    },
#                    {
#                      "type": "context",
#                      "elements": [
#                        {
#                          "type": "mrkdwn",
#                          "text": "*Environment:* ${{ matrix.environment }}"
#                        },
#                        {
#                          "type": "mrkdwn",
#                          "text": "*Status:* ✅ Passed"
#                        }
#                      ]
#                    },
#                    {
#                      "type": "image",
#                      "title": {
#                        "type": "plain_text",
#                        "text": "Test Summary Charts"
#                      },
#                      "image_url": "${{ env.COMBINED_URL }}",
#                      "alt_text": "Pie + Bar Chart"
#                    },
#                    {
#                      "type": "section",
#                      "text": {
#                        "type": "mrkdwn",
#                        "text": "Here's the corresponding report :arrow_right::arrow_right:"
#                      },
#                      "accessory": {
#                        "type": "button",
#                        "text": {
#                          "type": "plain_text",
#                          "text": "Click to Download",
#                          "emoji": true
#                        },
#                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}",
#                        "style": "primary",
#                        "action_id": "button-action"
#                      }
#                    }
#                  ]
#                }
#              ]
#            }
#
#        env:
#          SLACK_WEBHOOK_URL: ${{ fromJSON(steps.configure_slack.outputs.result).SLACK_WEBHOOK_URL }}
#          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
#
#      - name: Post to Slack channel on Failure
#        if: ${{ fromJSON(steps.configure_slack.outputs.result).SLACK_WEBHOOK_URL != '' && failure() }}
#        uses: slackapi/slack-github-action@v1.23.0
#        with:
#          payload: |
#            {
#              "attachments": [
#                {
#                  "color": "#FF0000",
#                  "blocks": [
#                    {
#                      "type": "section",
#                      "text": {
#                        "type": "mrkdwn",
#                        "text": "Hey 👋 \n*${{ github.workflow }}* has failed! ❌\n"
#                      }
#                    },
#                    {
#                      "type": "section",
#                      "text": {
#                        "type": "mrkdwn",
#                        "text": "*Passed:* ${{ steps.parse_counts.outputs.PASSED }}  *Failed:* ${{ steps.parse_counts.outputs.FAILED }}  *Error:* ${{ steps.parse_counts.outputs.ERROR }}  *Skipped:* ${{ steps.parse_counts.outputs.SKIPPED }}  *XFail:* ${{ steps.parse_counts.outputs.XFAIL }}"
#                      }
#                    },
#                    {
#                      "type": "context",
#                      "elements": [
#                        {
#                          "type": "mrkdwn",
#                          "text": "*Environment:* ${{ matrix.environment }}"
#                        },
#                        {
#                          "type": "mrkdwn",
#                          "text": "*Status:* ❌ Failed"
#                        }
#                      ]
#                    },
#                    {
#                      "type": "image",
#                      "title": {
#                        "type": "plain_text",
#                        "text": "Test Summary Charts"
#                      },
#                      "image_url": "${{ env.COMBINED_URL }}",
#                      "alt_text": "Pie + Bar Chart"
#                    },
#                    {
#                      "type": "section",
#                      "text": {
#                        "type": "mrkdwn",
#                        "text": "Here's the corresponding report :arrow_right::arrow_right:"
#                      },
#                      "accessory": {
#                        "type": "button",
#                        "text": {
#                          "type": "plain_text",
#                          "text": "Click to Download",
#                          "emoji": true
#                        },
#                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}",
#                        "style": "danger",
#                        "action_id": "button-action"
#                      }
#                    }
#                  ]
#                }
#              ]
#            }

      - name: Slack Notification (Summary + Charts)
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [
                {
                  \"color\": \"${{ job.status == 'success' && '#36a64f' || '#FF0000' }}\",
                  \"blocks\": [
                    {
                      \"type\": \"section\",
                      \"text\": {
                        \"type\": \"mrkdwn\",
                        \"text\": \"Hola 👋\n*${{ github.workflow }}* were just triggered!\n\n*Passed:* ${{ steps.parse_counts.outputs.PASSED }}   *Failed:* ${{ steps.parse_counts.outputs.FAILED }}   *Error:* ${{ steps.parse_counts.outputs.ERROR }}   *Skipped:* ${{ steps.parse_counts.outputs.SKIPPED }}   *Reruns:* ${{ steps.parse_counts.outputs.RERUN }}\n\n*Environment:* `${{ matrix.environment }}`\n*Status:* `${{ job.status }}`\"
                      }
                    },
                    {
                      \"type\": \"actions\",
                      \"elements\": [
                        {
                          \"type\": \"button\",
                          \"text\": {\"type\": \"plain_text\", \"text\": \"📥 Download Report\"},
                          \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}\",
                          \"style\": \"primary\"
                        }
                      ]
                    },
                    {
                      \"type\": \"image\",
                      \"title\": {
                        \"type\": \"plain_text\",
                        \"text\": \"Test Summary Charts\"
                      },
                      \"image_url\": \"${{ env.COMBINED_URL }}\",
                      \"alt_text\": \"Pie + Bar Chart\"
                    }
                  ]
                }
              ]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}


      - name: Post Slack Notification
        if: ${{ fromJSON(steps.configure_slack.outputs.result).SLACK_WEBHOOK_URL != ' '}}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && '#36a64f' || '#FF0000' }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Hola 👋 \n*${{ github.workflow }}* just ran!"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Passed:* ${{ steps.parse_counts.outputs.PASSED }}   *Failed:* ${{ steps.parse_counts.outputs.FAILED }}   *Error:* ${{ steps.parse_counts.outputs.ERROR }}   *Skipped:* ${{ steps.parse_counts.outputs.SKIPPED }}   *XFail:* ${{ steps.parse_counts.outputs.XFAIL }}"
                      }
                    },
                    {
                      "type": "context",
                      "elements": [
                        {
                          "type": "mrkdwn",
                          "text": "*Environment:* ${{ matrix.environment }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Status:* ${{ job.status == 'success' && ':white_check_mark:' || ':x:' }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "⬇️ Click to Download Report",
                            "emoji": true
                          },
                          "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}",
                          "style": "${{ job.status == 'success' && 'primary' || 'danger' }}"
                        }
                      ]
                    },
                    {
                      "type": "image",
                      "title": {
                        "type": "plain_text",
                        "text": "Test Summary Charts"
                      },
                      "image_url": "${{ env.COMBINED_URL }}",
                      "alt_text": "Pie + Bar Chart"
                    }
                  ]
                }
              ]
            }

        env:
          SLACK_WEBHOOK_URL: ${{ fromJSON(steps.configure_slack.outputs.result).SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
