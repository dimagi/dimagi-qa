# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Hourly Update Bed Avail Load test

on:
  schedule:
    - cron: '2 * * * 1-5'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'production'
        type: choice
        options:
          - production
jobs:
  set_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix-manual.outputs.matrix || steps.set-matrix-default.outputs.matrix }}
    steps:
      - id: set-matrix-manual
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"${{ inputs.environment }}\"]}"
      - id: set-matrix-default
        if: ${{ !contains(github.event_name , 'dispatch') }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"production\"]}"

  build:
    needs: set_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set_matrix.outputs.matrix) }}
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.environment }}
      cancel-in-progress: true
    name: LoadTest on '${{ matrix.environment }}'
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.13
        uses: actions/setup-python@v2
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r LocustScripts/requirements.txt

      - name: Hourly Update Bed Availability Load test with Locust
        continue-on-error: true
        env:
          DIMAGIQA_ENV: ${{ matrix.environment }}  #${{ secrets.DIMAGIQA_URL }}
          DIMAGIQA_LOCUST_PASSWORD: ${{ secrets.DIMAGIQA_LOCUST_PASSWORD }}
          DIMAGIQA_MAIL_USERNAME: ${{ secrets.DIMAGIQA_MAIL_USERNAME }}
          DIMAGIQA_MAIL_PASSWORD: ${{ secrets.DIMAGIQA_MAIL_PASSWORD }}
        run: |
          echo "client_payload: ${{ toJson(github.event.client_payload) }}"
          echo "matrix environment: ${{ matrix.environment }}"
          echo "NOW=$(date +'%m-%d %H:%M')" >> $GITHUB_ENV
          echo ${{env.NOW}}
          python LocustScripts/update-scripts/run_24hr_locust_schedule.py \
            --locust-file LocustScripts/update-scripts/commcarehq-hourly-update-bed-availability-mw-login.py \
            --user-details LocustScripts/update-scripts/project-config/co-carecoordination-perf/mobile_worker_credentials_update_bed_avail_hourly.json \
            --app-config LocustScripts/update-scripts/project-config/co-carecoordination-perf/app_config_update_bed_avail.json \
            --host https://www.commcarehq.org \
            --domain co-carecoordination-perf \
            --app-id 6283b3d054f141c88345c584a8f2c48f \
            --build-id b9a1ef9ff5ba4b61957f1e0524f0dd03

      - name: Echo current Mountain Time hour
        run: |
          python -c "
          import pytz
          from datetime import datetime
          mt = pytz.timezone('US/Mountain')
          now = datetime.now(mt)
          print('Current Mountain Time hour:', now.strftime('%H'))
          "

      - name: Set MT hour to env
        run: |
          MT_HOUR=$(python -c "import pytz; from datetime import datetime; print(datetime.now(pytz.timezone('US/Mountain')).strftime('%H'))")
          echo "MT_HOUR=$MT_HOUR" >> $GITHUB_ENV

      - name: Archive test results
        id: artifact-upload-step
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: hourly-locust-reports-bed-avail-${{ env.MT_HOUR }}
          path:  /home/runner/work/dimagi-qa/dimagi-qa/hour_*.html
          retention-days: 2

      - name: Fetch artifact ID
        run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'


      - name: Set email vars
        if: ${{ always() }}
        id: configure_email
        uses: actions/github-script@v6
        env:
            JOB_STATUS: ${{ job.status }}
            CC_ENV: ${{ matrix.environment }}
        with:
          script: |
            const { promises: fs } = require('fs')

            const {JOB_STATUS, NOW, CC_ENV, GITHUB_HEAD_REF} = process.env
            const prefix = `[${CC_ENV}] Update Bed Availability Locust Tests - ${JOB_STATUS.toUpperCase()} - Run #${context.runNumber}`
            const suffix = `at ${NOW}`

            let subject = `${prefix} on "deploy_success" ${suffix}`
            if (context.eventName !== "repository_dispatch") {
              subject = `${prefix} on branch "${GITHUB_HEAD_REF}" ${suffix}`
            }

            let bodyFile = './common_utilities/mail_templates/email_pass.md'
            if (JOB_STATUS !== 'success') {
              bodyFile = './common_utilities/mail_templates/email_fail.md'
            }

            let actionRunLink = context.payload.repository.html_url + `/actions/runs/${context.runId}`
            let testSuite = 'BHA Update Bed Availability Hourly Load Tests for ${{ env.MT_HOUR }} hrs'
            let bodyContent = await fs.readFile(bodyFile, 'utf8')
            bodyContent = bodyContent.replace(/{{actionRunLink}}/g, actionRunLink)
                .replace(/{{runNumber}}/g, context.runNumber)
                .replace(/{{environment}}/g, CC_ENV)
                .replace(/{{testSuite}}/g, testSuite)

            let receivers = 'qa-automation@dimagi.com'
            if (context.eventName !== "pull_request" || context.eventName !== "push") {
              receivers = 'kbordoloi@dimagi.com'
            }

            return {
              "subject": subject,
              "body": bodyContent,
              "reference": Math.random().toString(36).substr(2),  // used to prevent threading of similar emails
              "receivers": receivers
            }

      - name: Send Result Email
        if: ${{ always() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.DIMAGIQA_MAIL_USERNAME}}
          password: ${{secrets.DIMAGIQA_MAIL_PASSWORD}}
          subject: ${{ fromJSON(steps.configure_email.outputs.result).subject }}
          to: ${{ fromJSON(steps.configure_email.outputs.result).receivers }}
          from: <${{secrets.DIMAGIQA_MAIL_USERNAME}}>
          html_body: ${{ fromJSON(steps.configure_email.outputs.result).body }}
          convert_markdown: true
          attachments: ${{ github.workspace }}/hour_*.html
          in_reply_to: ${{ fromJSON(steps.configure_email.outputs.result).reference }}

      - name: Set slack vars
        if: ${{ always() }}
        id: configure_slack
        uses: actions/github-script@v6
        env:
            JOB_STATUS: ${{ job.status }}
            CC_ENV: ${{ matrix.environment }}
            CC_EVENT: ${{ github.event_name }}
        with:
          result-encoding: string
          script: |
            const {CC_ENV, JOB_STATUS, CC_EVENT} = process.env
            let SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_BHA }}'
            if (CC_ENV == 'production') {
              SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_BHA }}'
              console.log("Slack notification")
            } else {
              SLACK_WEBHOOK_URL = ' '
              console.log("No notification sent")
            }

            return SLACK_WEBHOOK_URL

      - name: Post to Slack channel on Failure
        id: slack_fail
        uses: slackapi/slack-github-action@v1.23.0
        if: ${{ steps.configure_slack.outputs.result != ' ' && failure() }}
        with:
          payload: |
            {
            	"attachments": [
            		{
            			"color": "#FF0000",
            			"blocks": [
            				{
            					"type": "section",
            					"text": {
            						"type": "mrkdwn",
            						"text": " Hola :alphabet-yellow-q::alphabet-yellow-a: ðŸ‘‹ \n*${{ github.workflow }}* were just triggered for ${{ env.MT_HOUR }} hrs!\n"
            					}
            				},
            				{
            					"type": "context",
            					"elements": [
            						{
            							"type": "mrkdwn",
            							"text": "*Environment: *\n ${{ matrix.environment }}  \n"
            						},
            						{
            							"type": "mrkdwn",
            							"text": " "
            						},
            						{
            							"type": "mrkdwn",
            							"text": "*Status: *\n ${{ job.status }}  :x:"
            						}
            					]
            				},
            				{
            					"type": "section",
            					"text": {
            						"type": "mrkdwn",
            						"text": "Here's the corresponding report :arrow_right::arrow_right:"
            					},
            					"accessory": {
            						"type": "button",
            						"text": {
            							"type": "plain_text",
            							"text": "Click to Downlaod",
            							"emoji": true
            						},
            						"value": "click_me_123",
                                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}",
            						"action_id": "button-action",
            						"style": "danger"
            					}
            				}
            			]
            		}
            	]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ steps.configure_slack.outputs.result }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Post to Slack channel on Success
        id: slack_pass
        uses: slackapi/slack-github-action@v1.23.0
        if: ${{ steps.configure_slack.outputs.result != ' ' && success() }}
        with:
          payload: |
            {
            	"attachments": [
            		{
            			"color": "#36a64f",
            			"blocks": [
            				{
            					"type": "section",
            					"text": {
            						"type": "mrkdwn",
            						"text": " Hola :alphabet-yellow-q::alphabet-yellow-a: ðŸ‘‹ \n*${{ github.workflow }}* were just triggered for ${{ env.MT_HOUR }} hrs!\n"
            					}
            				},
            				{
            					"type": "context",
            					"elements": [
            						{
            							"type": "mrkdwn",
            							"text": "*Environment: *\n ${{ matrix.environment }}  \n"
            						},
            						{
            							"type": "mrkdwn",
            							"text": " "
            						},
            						{
            							"type": "mrkdwn",
            							"text": "*Status: *\n ${{ job.status }}  :white_check_mark:"
            						}
            					]
            				},
            				{
            					"type": "section",
            					"text": {
            						"type": "mrkdwn",
            						"text": "Here's the corresponding report :arrow_right::arrow_right:"
            					},
            					"accessory": {
            						"type": "button",
            						"text": {
            							"type": "plain_text",
            							"text": "Click to Download",
            							"emoji": true
            						},
            						"value": "click_me_123",
            						"url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}",
            						"action_id": "button-action",
            						"style": "primary"
            					}
            				}
            			]
            		}
            	]
            }

        env:
          SLACK_WEBHOOK_URL: ${{ steps.configure_slack.outputs.result }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
