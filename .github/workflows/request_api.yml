# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Request API

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  repository_dispatch:
    types: [ deploy_success ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - india
  schedule:
    - cron: '30 6 * * 1-5'

jobs:
  set_matrix:
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'repository_dispatch' && github.event.client_payload.environment == 'staging') }}
    outputs:
      matrix: ${{ steps.set-matrix-schedule.outputs.matrix || steps.set-matrix-deploy.outputs.matrix || steps.set-matrix-manual.outputs.matrix || steps.set-matrix-default.outputs.matrix }}
    steps:
      - id: set-matrix-schedule
        if: ${{ github.event_name  == 'schedule' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"staging\"]}"
      - id: set-matrix-deploy
        if: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment != 'staging' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"${{ github.event.client_payload.environment }}\"]}"
      - id: set-matrix-manual
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"${{ inputs.environment }}\"]}"
      - id: set-matrix-default
        if: ${{ github.event_name != 'repository_dispatch' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"production\", \"staging\",\"india\"]}"

  build:
    needs: set_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set_matrix.outputs.matrix) }}
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.environment }}
      cancel-in-progress: true
    name: Request API on '${{ matrix.environment }}'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.13
      uses: actions/setup-python@v2
      with:
        python-version: 3.13

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r RequestAPI/requirements.txt


    - name: Requests API tests with pytest
      env:
        DIMAGIQA_ENV: ${{ matrix.environment }}  #${{ secrets.DIMAGIQA_URL }}
        DIMAGIQA_PASSWORD: ${{ secrets.DIMAGIQA_API_PASSWORD }}
        DIMAGIQA_LOGIN_USER: ${{ secrets.DIMAGIQA_APILOGIN_USERNAME }}
        DIMAGIQA_LOGIN_PASS: ${{ secrets.DIMAGIQA_APILOGIN_PASSWORD }}
        DIMAGIQA_PROD_API_KEY: ${{secrets.DIMAGIQA_APIPROD_API_KEY}}
        DIMAGIQA_STAGING_API_KEY: ${{secrets.DIMAGIQA_APISTAGING_API_KEY}}
        DIMAGIQA_INDIA_API_KEY: ${{secrets.DIMAGIQA_INDIA_API_KEY}}
      run: |
        echo "client_payload: ${{ toJson(github.event.client_payload) }}"
        echo "matrix environment: ${{ matrix.environment }}"
        echo "NOW=$(date +'%m-%d %H:%M')" >> $GITHUB_ENV
        echo ${{env.NOW}}
        pytest -v --tb=short -n auto --dist=loadfile --reruns 1 --html=report_api_${{ matrix.environment }}.html --self-contained-html --rootdir= RequestAPI/testCases

    - name: Parse test counts
      id: parse_counts
      if: always()
      run: |
        # Extract variables from the api_test_counts.txt file
        while IFS= read -r line; do
          echo "::set-output name=${line%=*}::${line#*=}"
        done < test_counts_${{ matrix.environment }}.txt

    - name: Archive test results
      id: artifact-upload-step
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-result-reports-${{ matrix.environment }}-${{ github.run_id }}
        path: /home/runner/work/dimagi-qa/dimagi-qa/report_api_${{ matrix.environment }}.html
        retention-days: 2

    - name: Fetch artifact ID
      run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

    - name: Send Failure Email
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.DIMAGIQA_MAIL_USERNAME}}
        password: ${{secrets.DIMAGIQA_MAIL_PASSWORD}}
        subject: ${{ github.event.client_payload.environment }} FAIL - Request API Tests[#${{github.run_number}}] on branch "${{ github.ref_name }}", ${{env.NOW}}
        to: qa@dimagi.com, sameena.shaik@fissionlabs.com
        from: <${{secrets.DIMAGIQA_MAIL_USERNAME}}>
        html_body: file:////home/runner/work/dimagi-qa/dimagi-qa/RequestAPI/email_fail.html
        attachments: /home/runner/work/dimagi-qa/dimagi-qa/report_api_${{ matrix.environment }}.html
        priority: normal

    - name: Set slack vars
      if: ${{ always() }}
      id: configure_slack
      uses: actions/github-script@v6
      env:
          JOB_STATUS: ${{ job.status }}
          CC_ENV: ${{ matrix.environment }}
          CC_EVENT: ${{ github.event_name }}
      with:
        result-encoding: json
        script: |
          const {CC_ENV, JOB_STATUS, CC_EVENT} = process.env;
          let SLACK_WEBHOOK_URL = '';
          let SLACK_CHANNEL_ID = '';
          if (CC_EVENT == 'repository_dispatch' && CC_ENV == 'production') {
            SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_PROD_RESULTS }}';
            SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_PROD }}';
            console.log( "Prod deploy");
          } else if (CC_EVENT != 'repository_dispatch' && CC_ENV == 'production' && JOB_STATUS == 'failure') {
            SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}';
            SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}';
            console.log( "Not Prod deploy but Prof failure");
          } else if (CC_ENV == 'staging' && JOB_STATUS == 'failure') {
            SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}';
            SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}';
            console.log("Staging Failure");
          } else if (CC_EVENT == 'repository_dispatch' && CC_ENV == 'india') {
            SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_INDIA }}';
            SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_INDIA }}';
            console.log("India Failure");
          }else if (CC_EVENT != 'repository_dispatch' && CC_ENV == 'india' && JOB_STATUS == 'failure') {
           SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}';
           SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}';
           console.log("India Success");
          }else {
           SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}';
           SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}';
           console.log("No notification sent");
          }

          core.setOutput('SLACK_WEBHOOK_URL', SLACK_WEBHOOK_URL);
          core.setOutput('SLACK_CHANNEL_ID', SLACK_CHANNEL_ID);

          return { SLACK_WEBHOOK_URL, SLACK_CHANNEL_ID };

    - name: Upload Combined Chart to Slack
      if: ${{ (success() || failure()) && steps.configure_slack.outputs.SLACK_CHANNEL_ID != '' }}
      run: |
        COMBINED_JSON=$(curl -s -F file=@slack_charts/summary_combined.png \
          -F channels=${{ steps.configure_slack.outputs.SLACK_CHANNEL_ID }} \
          -F "initial_comment=üìä Test Summary Charts - ${{ matrix.environment }}" \
          -H "Authorization: Bearer ${{ secrets.SLACK_QA_BOT_TOKEN }}" \
          https://slack.com/api/files.upload)
    
        COMBINED_URL=$(echo $COMBINED_JSON | jq -r '.file.permalink')
        echo "COMBINED_URL=$COMBINED_URL" >> $GITHUB_ENV

    - name: Debug Slack Upload
      if: ${{ (success() || failure()) }}
      run: |
        echo "COMBINED_JSON=$COMBINED_JSON"
        echo "COMBINED_URL=$COMBINED_URL"
        echo "Result: ${{ steps.configure_slack.outputs.result }}"

    - name: Slack Notification (Summary)
      id: slack_push
      uses: slackapi/slack-github-action@v1.23.0
      if: ${{ (success() || failure()) && steps.configure_slack.outputs.SLACK_WEBHOOK_URL != '' }}
      with:
        payload: |
          {
          	"attachments": [
          		{
          			"color": "#36a64f",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "${{ job.status == 'success' && '‚úÖ' || '‚ùå' }} *${{ github.workflow }}* finished!"
                        }
                      },
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "*Passed:* ${{ steps.parse_counts.outputs.PASSED  || '0' }} *Failed:* ${{ steps.parse_counts.outputs.FAILED || '0' }} *Error:* ${{ steps.parse_counts.outputs.ERROR || '0' }} *Skipped:* ${{ steps.parse_counts.outputs.SKIPPED || '0' }} *XFail:* ${{ steps.parse_counts.outputs.XFAIL || '0' }}"
                        }
                      },
                      {
                        "type": "context",
                        "elements": [
                          { "type": "mrkdwn", "text": "*Environment:* ${{ matrix.environment }}" },
                          { "type": "mrkdwn", "text": "*Status:* ${{ job.status }} ${{ job.status == 'success' && ':white_check_mark:' || ':x:' }}" }
                        ]
                      },
                      {
                        "type": "section",
                        "text": { "type": "mrkdwn", "text": "Here's the corresponding report :arrow_right::arrow_right:" },
                        "accessory": {
                          "type": "button",
                          "text": { "type": "plain_text", "text": "Click to Download", "emoji": true },
                          "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}"
                        }
                      }
                    ]
                  }
                ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ steps.configure_slack.outputs.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  slack_summary:
    name: Slack Notification of Summary
    needs: [build]   # adjust to your actual test job
    runs-on: ubuntu-latest
    steps:
      - name: Set slack vars
        id: configure_slack
        run: |
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}" >> $GITHUB_ENV
          echo "SLACK_CHANNEL_ID=${{ secrets.SLACK_CHANNEL_ID }}" >> $GITHUB_ENV

      - name: Upload Combined Chart to Slack for combined alert
        id: upload_chart
        if: ${{ (success() || failure()) && env.SLACK_CHANNEL_ID != '' }}
        env:
          SLACK_TOKEN: ${{ secrets.SLACK_QA_BOT_TOKEN }}
        run: |
          set -e
          COMBINED_JSON=$(curl -s -F file=@slack_charts/summary_combined.png \
            -F channels=$SLACK_CHANNEL_ID \
            -F "initial_comment=üìä Test Summary Charts - ${{ matrix.environment }}" \
            -H "Authorization: Bearer $SLACK_TOKEN" \
            https://slack.com/api/files.upload)

          FILE_ID=$(echo "$COMBINED_JSON" | jq -r '.file.id')
          FILE_NAME=$(echo "$COMBINED_JSON" | jq -r '.file.name')

          # Make it public
          SHARE_JSON=$(curl -s -X POST \
            -H "Authorization: Bearer $SLACK_TOKEN" \
            -H "Content-type: application/json; charset=utf-8" \
            --data "{\"file\":\"$FILE_ID\"}" \
            https://slack.com/api/files.sharedPublicURL)

          PERMALINK_PUBLIC=$(echo "$SHARE_JSON" | jq -r '.file.permalink_public')
          TID_FID=$(echo "$PERMALINK_PUBLIC" | sed -E 's#https://slack-files.com/([^-]+-[^-]+)-.*#\1#')
          PUB_SECRET=$(echo "$PERMALINK_PUBLIC" | sed -E 's#https://slack-files.com/[^-]+-[^-]+-(.*)#\1#')
          PUBLIC_IMAGE_URL="https://files.slack.com/files-pri/$TID_FID/$FILE_NAME?pub_secret=${PUB_SECRET}"

          echo "PUBLIC_IMAGE_URL=$PUBLIC_IMAGE_URL" >> $GITHUB_ENV
          echo "Public image URL: $PUBLIC_IMAGE_URL"

      - name: Prepare Slack payload JSON
        if: always()
        run: |
          BLOCKS="[
            {
              \"type\": \"section\",
              \"text\": { \"type\": \"mrkdwn\", \"text\": \"${{ job.status == 'success' && '‚úÖ' || '‚ùå' }} *${{ github.workflow }}* finished!\" }
            },
            {
              \"type\": \"section\",
              \"text\": { \"type\": \"mrkdwn\", \"text\": \"*Passed:* ${{ steps.parse_counts.outputs.PASSED || '0' }} *Failed:* ${{ steps.parse_counts.outputs.FAILED || '0' }} *Error:* ${{ steps.parse_counts.outputs.ERROR || '0' }} *Skipped:* ${{ steps.parse_counts.outputs.SKIPPED || '0' }} *XFail:* ${{ steps.parse_counts.outputs.XFAIL || '0' }}\" }
            },
            {
              \"type\": \"context\",
              \"elements\": [
                { \"type\": \"mrkdwn\", \"text\": \"*Environment:* ${{ matrix.environment }}\" },
                { \"type\": \"mrkdwn\", \"text\": \"*Status:* ${{ job.status }} ${{ job.status == 'success' && ':white_check_mark:' || ':x:' }}\" }
              ]
            },
            {
              \"type\": \"section\",
              \"text\": { \"type\": \"mrkdwn\", \"text\": \"Here's the corresponding report :arrow_right::arrow_right:\" },
              \"accessory\": {
                \"type\": \"button\",
                \"text\": { \"type\": \"plain_text\", \"text\": \"Click to Download\", \"emoji\": true },
                \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }}\"
              }
            }
          ]"

          if [ -n "$PUBLIC_IMAGE_URL" ] && [ "$PUBLIC_IMAGE_URL" != "null" ]; then
            BLOCKS=$(echo "$BLOCKS" | jq ". += [{
              \"type\": \"image\",
              \"title\": { \"type\": \"plain_text\", \"text\": \"Test Summary Charts\" },
              \"image_url\": \"$PUBLIC_IMAGE_URL\",
              \"alt_text\": \"Pie + Bar Chart\"
            }]")
          fi

          echo "{ \"blocks\": $BLOCKS }" > slack_payload.json
          cat slack_payload.json

      - name: Slack Notification of Summary
        id: slack_push_summary
        uses: slackapi/slack-github-action@v1.23.0
        if: ${{ (success() || failure()) && env.SLACK_WEBHOOK_URL != '' }}
        with:
          payload-file-path: slack_payload.json
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
