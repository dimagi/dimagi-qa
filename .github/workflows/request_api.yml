# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Request API

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  repository_dispatch:
    types: [ deploy_success ]


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - uses: actions/checkout@v3
    - name: Setup java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r RequestAPI/requirements.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Requests API tests with pytest
      env:
        DIMAGIQA_ENV: ${{ github.event.client_payload.environment }}  #${{ secrets.DIMAGIQA_URL }}
        DIMAGIQA_PASSWORD: ${{ secrets.DIMAGIQA_API_PASSWORD }}
        DIMAGIQA_LOGIN_USER: ${{ secrets.DIMAGIQA_APILOGIN_USERNAME }}
        DIMAGIQA_LOGIN_PASS: ${{ secrets.DIMAGIQA_APILOGIN_PASSWORD }}
        DIMAGIQA_PROD_API_KEY: ${{secrets.DIMAGIQA_APIPROD_API_KEY}}
        DIMAGIQA_STAGING_API_KEY: ${{secrets.DIMAGIQA_APISTAGING_API_KEY}}
      run: |
        echo "client_payload: ${{ toJson(github.event.client_payload) }}"
        echo "NOW=$(date +'%m-%d %H:%M')" >> $GITHUB_ENV
        echo ${{env.NOW}}
        pytest -v --tb=short -n auto --dist=loadfile --reruns 1 --rootdir= RequestAPI/testCases --alluredir=RequestAPI/Results
        npm install -g allure-commandline --save-dev
        allure generate RequestAPI/Results -o RequestAPI/AllureReports

    - name: Zip Reports folder
      uses: papeloto/action-zip@v1
      if: always()
      with:
          files: AllureReports/
          dest: AllureReports.zip


    - name: Send Failure Email
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.DIMAGIQA_MAIL_USERNAME}}
        password: ${{secrets.DIMAGIQA_MAIL_PASSWORD}}
        subject: FAIL - Request API Tests[#${{github.run_number}}] on branch "${{ github.ref_name }}", ${{env.NOW}}
        to: kbordoloi@dimagi.com
        from: <${{secrets.DIMAGIQA_MAIL_USERNAME}}>
        html_body: file:////home/runner/work/dimagi-qa/dimagi-qa/RequestAPI/email_fail.html
        attachments: /home/runner/work/dimagi-qa/dimagi-qa/RequestAPI/AllureReports.zip
        priority: normal

    - name: Send Pass Email
      uses: dawidd6/action-send-mail@v3
      if: success()
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.DIMAGIQA_MAIL_USERNAME}}
        password: ${{secrets.DIMAGIQA_MAIL_PASSWORD}}
        subject: PASS - Request API Tests[#${{github.run_number}}] on branch "${{ github.ref_name }}", ${{env.NOW}}
        to: kbordoloi@dimagi.com
        from: <${{secrets.DIMAGIQA_MAIL_USERNAME}}>
        html_body: file:////home/runner/work/dimagi-qa/dimagi-qa/RequestAPI/email_pass.html
        attachments: /home/runner/work/dimagi-qa/dimagi-qa/RequestAPI/AllureReports.zip
        priority: normal

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: test-result-reports
        path: /home/runner/work/dimagi-qa/dimagi-qa/RequestAPI/AllureReports.zip
        retention-days: 2
