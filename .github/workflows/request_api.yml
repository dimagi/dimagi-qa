# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Request API

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  repository_dispatch:
    types: [ deploy_success ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - india
  schedule:
    - cron: '30 6 * * 1-5'

jobs:
  set_matrix:
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'repository_dispatch' && github.event.client_payload.environment == 'staging') }}
    outputs:
      matrix: ${{ steps.set-matrix-schedule.outputs.matrix || steps.set-matrix-deploy.outputs.matrix || steps.set-matrix-manual.outputs.matrix || steps.set-matrix-default.outputs.matrix }}
    steps:
      - id: set-matrix-schedule
        if: ${{ github.event_name  == 'schedule' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"staging\"]}"
      - id: set-matrix-deploy
        if: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment != 'staging' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"${{ github.event.client_payload.environment }}\"]}"
      - id: set-matrix-manual
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"${{ inputs.environment }}\"]}"
      - id: set-matrix-default
        if: ${{ github.event_name != 'repository_dispatch' }}
        run: |
          echo "::set-output name=matrix::{\"environment\": [\"production\", \"staging\",\"india\"]}"

  build:
    needs: set_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.set_matrix.outputs.matrix) }}
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.environment }}
      cancel-in-progress: true
    name: Request API on '${{ matrix.environment }}'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.13
      uses: actions/setup-python@v2
      with:
        python-version: 3.13

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r RequestAPI/requirements.txt


    - name: Requests API tests with pytest
      env:
        DIMAGIQA_ENV: ${{ matrix.environment }}  #${{ secrets.DIMAGIQA_URL }}
        DIMAGIQA_PASSWORD: ${{ secrets.DIMAGIQA_API_PASSWORD }}
        DIMAGIQA_LOGIN_USER: ${{ secrets.DIMAGIQA_APILOGIN_USERNAME }}
        DIMAGIQA_LOGIN_PASS: ${{ secrets.DIMAGIQA_APILOGIN_PASSWORD }}
        DIMAGIQA_PROD_API_KEY: ${{secrets.DIMAGIQA_APIPROD_API_KEY}}
        DIMAGIQA_STAGING_API_KEY: ${{secrets.DIMAGIQA_APISTAGING_API_KEY}}
        DIMAGIQA_INDIA_API_KEY: ${{secrets.DIMAGIQA_INDIA_API_KEY}}
      run: |
        echo "client_payload: ${{ toJson(github.event.client_payload) }}"
        echo "matrix environment: ${{ matrix.environment }}"
        echo "NOW=$(date +'%m-%d %H:%M')" >> $GITHUB_ENV
        echo ${{env.NOW}}
        pytest -v --tb=short -n auto --dist=loadfile --reruns 1 --html=report_api_${{ matrix.environment }}.html --self-contained-html --rootdir= RequestAPI/testCases

    - name: Parse test counts
      id: parse_counts
      if: always()
      run: |
        # Extract variables from the api_test_counts.txt file
        while IFS= read -r line; do
          echo "::set-output name=${line%=*}::${line#*=}"
        done < test_counts_${{ matrix.environment }}.txt

    - name: Archive test results
      id: artifact-upload-step
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-result-reports-${{ matrix.environment }}-${{ github.run_id }}
        path: /home/runner/work/dimagi-qa/dimagi-qa/report_api_${{ matrix.environment }}.html
        retention-days: 2

    - name: Fetch artifact ID
      run: echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'

    - name: Send Failure Email
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.DIMAGIQA_MAIL_USERNAME}}
        password: ${{secrets.DIMAGIQA_MAIL_PASSWORD}}
        subject: ${{ github.event.client_payload.environment }} FAIL - Request API Tests[#${{github.run_number}}] on branch "${{ github.ref_name }}", ${{env.NOW}}
        to: qa@dimagi.com, sameena.shaik@fissionlabs.com
        from: <${{secrets.DIMAGIQA_MAIL_USERNAME}}>
        html_body: file:////home/runner/work/dimagi-qa/dimagi-qa/RequestAPI/email_fail.html
        attachments: /home/runner/work/dimagi-qa/dimagi-qa/report_api_${{ matrix.environment }}.html
        priority: normal

    - name: Set slack vars
      if: ${{ always() }}
      id: configure_slack
      uses: actions/github-script@v6
      env:
          JOB_STATUS: ${{ job.status }}
          CC_ENV: ${{ matrix.environment }}
          CC_EVENT: ${{ github.event_name }}
      with:
        result-encoding: json
        script: |
          const {CC_ENV, JOB_STATUS, CC_EVENT} = process.env;
          let SLACK_WEBHOOK_URL = '';
          let SLACK_CHANNEL_ID = '';
          if (CC_EVENT == 'repository_dispatch' && CC_ENV == 'production') {
            SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_PROD_RESULTS }}';
            SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_PROD }}';
            console.log( "Prod deploy");
          } else if (CC_EVENT != 'repository_dispatch' && CC_ENV == 'production' && JOB_STATUS == 'failure') {
            SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}';
            SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}';
            console.log( "Not Prod deploy but Prof failure");
          } else if (CC_ENV == 'staging' && JOB_STATUS == 'failure') {
            SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}';
            SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}';
            console.log("Staging Failure");
          } else if (CC_EVENT == 'repository_dispatch' && CC_ENV == 'india') {
            SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_INDIA }}';
            SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_INDIA }}';
            console.log("India Failure");
          }else if (CC_EVENT != 'repository_dispatch' && CC_ENV == 'india' && JOB_STATUS == 'failure') {
           SLACK_WEBHOOK_URL = '${{ secrets.SLACK_WEBHOOK_URL_SMOKE }}';
           SLACK_CHANNEL_ID = '${{ secrets.SLACK_CHANNEL_ID_SMOKE }}';
           console.log("India Success");
          }else {
            SLACK_WEBHOOK_URL = '';
            SLACK_CHANNEL_ID = '';
            console.log("No notification sent");
          }

          core.setOutput('SLACK_WEBHOOK_URL', SLACK_WEBHOOK_URL);
          core.setOutput('SLACK_CHANNEL_ID', SLACK_CHANNEL_ID);

          return { SLACK_WEBHOOK_URL, SLACK_CHANNEL_ID };

    - name: Upload Combined Chart to Slack
      if: ${{ (success() || failure()) && steps.configure_slack.outputs.SLACK_CHANNEL_ID != '' }}
      run: |
        COMBINED_JSON=$(curl -s -F file=@slack_charts/summary_combined.png \
          -F channels=${{ steps.configure_slack.outputs.SLACK_CHANNEL_ID }} \
          -F "initial_comment=üìä Test Summary Charts - ${{ matrix.environment }}" \
          -H "Authorization: Bearer ${{ secrets.SLACK_QA_BOT_TOKEN }}" \
          https://slack.com/api/files.upload)
    
        COMBINED_URL=$(echo $COMBINED_JSON | jq -r '.file.permalink')
        echo "COMBINED_URL=$COMBINED_URL" >> $GITHUB_ENV

    - name: Debug Slack Upload
      if: ${{ (success() || failure()) }}
      run: |
        echo "COMBINED_JSON=$COMBINED_JSON"
        echo "COMBINED_URL=$COMBINED_URL"
        echo "Result: ${{ steps.configure_slack.outputs.result }}"


    - name: Slack Notification (Summary + Charts)
      if: ${{ (success() || failure()) && steps.configure_slack.outputs.SLACK_WEBHOOK_URL != '' && env.COMBINED_URL != '' }}
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          STATUS_COLOR="#36a64f"
          STATUS_TEXT="‚úÖ PASSED"
          BUTTON_STYLE="primary"
        else
          STATUS_COLOR="#FF0000"
          STATUS_TEXT="‚ùå FAILED"
          BUTTON_STYLE="danger"
        fi
    
        SLACK_URL="${{ steps.configure_slack.outputs.SLACK_WEBHOOK_URL }}"
    
        WORKFLOW_TEXT="*${{ github.workflow }}* finished!\n\n*Environment:* \`${{ matrix.environment }}\`\n*Status:* $STATUS_TEXT"
        SUMMARY_TEXT="*Passed:* ${{ steps.parse_counts.outputs.PASSED }}   *Failed:* ${{ steps.parse_counts.outputs.FAILED }}   *Error:* ${{ steps.parse_counts.outputs.ERROR }}   *Skipped:* ${{ steps.parse_counts.outputs.SKIPPED }}   *Reruns:* ${{ steps.parse_counts.outputs.RERUN }}"
    
        jq -n \
          --arg color "$STATUS_COLOR" \
          --arg workflow_text "$WORKFLOW_TEXT" \
          --arg summary_text "$SUMMARY_TEXT" \
          --arg button_style "$BUTTON_STYLE" \
          --arg run_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          --arg img "${{ env.COMBINED_URL }}" \
          '{
            attachments: [{
              color: $color,
              fallback: "Test summary notification for $workflow_text",
              blocks: [
                { type: "section", text: { type: "mrkdwn", text: $workflow_text }},
                { type: "section", 
                  text: { type: "mrkdwn", text: $summary_text },
                  accessory: {
                    type: "button",
                    text: { type: "plain_text", text: "üì• Download Report" },
                    url: $run_url,
                    action_id: "button-action"
                  }
                },
                { type: "image", title: { type: "plain_text", text: "Test Summary Charts" }, image_url: $img, alt_text: "Pie + Bar Chart" }
              ]
            }]
          }' | curl -X POST -H "Content-type: application/json" --data @- "$SLACK_URL"